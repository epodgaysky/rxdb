{"version":3,"file":"downstream.js","names":["_rxjs","require","_rxError","_rxStorageHelper","_index","_checkpoint","_helper","_metaInstance","startReplicationDownstream","state","input","initialCheckpoint","downstream","checkpointDoc","getLastCheckpointDoc","setCheckpoint","identifierHash","hashFunction","identifier","replicationHandler","timer","openTasks","addNewTask","task","stats","down","taskWithTime","time","push","streamQueue","then","useTasks","length","events","active","next","innerTaskWithTime","ensureNotFalsy","shift","lastTimeMasterChangesRequested","console","log","downstreamResyncOnce","downstreamProcessChanges","firstSyncDone","getValue","canceled","sub","masterChangeStream$","pipe","mergeMap","ev","firstValueFrom","up","filter","s","subscribe","masterChangeStreamEmit","unsubscribe","checkpointQueue","lastCheckpoint","promises","downResult","masterChangesSince","pullBatchSize","documents","stackCheckpoints","checkpoint","persistFromMaster","Promise","all","tasks","docsOfAllTasks","forEach","Error","appendToArray","persistenceQueue","PROMISE_RESOLVE_VOID","nonPersistedFromMaster","docs","primaryPath","docData","docId","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","forkInstance","findDocumentsById","getAssumedMasterState","currentForkStateList","assumedMasterState","currentForkState","Map","doc","set","map","forkStateFullDoc","get","forkStateDocData","writeDocToDocState","hasAttachments","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkState","conflictHandler","isEqual","_meta","getHeightOfRevision","areStatesExactlyEqual","getMetaWriteRow","newForkState","assign","flatClone","_attachments","getDefaultRevision","lwt","now","nextRevisionHeight","keepMeta","forkWriteRow","previous","document","createRevision","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","getWrittenDocumentsFromBulkWriteResponse","processed","mustThrow","error","status","throwMe","newRxError","writeError","metaInstance","stripAttachmentsDataFromMetaWriteRows","metaWriteResult","id","documentId","catch","unhandledError"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter,\n    mergeMap\n} from 'rxjs';\nimport { newRxError } from '../rx-error.ts';\nimport { getWrittenDocumentsFromBulkWriteResponse, stackCheckpoints } from '../rx-storage-helper.ts';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint,\n    WithDeletedAndAttachments,\n    RxError\n} from '../types/index.d.ts';\nimport {\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getHeightOfRevision,\n    now,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils/index.ts';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint.ts';\nimport {\n    stripAttachmentsDataFromMetaWriteRows,\n    writeDocToDocState\n} from './helper.ts';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance.ts';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport async function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.downstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'down');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'down',\n                state.input.initialCheckpoint.downstream\n            );\n        }\n    }\n\n    const identifierHash = await state.input.hashFunction(state.input.identifier);\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const innerTaskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull\n                     * from the master, then we can drop the task.\n                     */\n                    if (innerTaskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (innerTaskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(innerTaskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(innerTaskWithTime.task);\n                }\n                if (useTasks.length === 0) {\n                    return;\n                }\n\n                if (useTasks[0] === 'RESYNC') {\n                    console.log('[RXDB_DOWNSTREAM] addNewTask tasks processing: RESYNC');\n                    return downstreamResyncOnce();\n                } else {\n                    console.log('[RXDB_DOWNSTREAM] addNewTask tasks processing: ', useTasks);\n                    return downstreamProcessChanges(useTasks);\n                }\n            }).then(() => {\n                state.events.active.down.next(false);\n                if (\n                    !state.firstSyncDone.down.getValue() &&\n                    !state.events.canceled.getValue()\n                ) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     * Only do this if not canceled yet, otherwise firstValueFrom errors\n     * when running on a completed observable.\n     */\n    if (!state.events.canceled.getValue()) {\n        const sub = replicationHandler\n            .masterChangeStream$\n            .pipe(\n                mergeMap(async (ev) => {\n                    /**\n                     * While a push is running, we have to delay all incoming\n                     * events from the server to not mix up the replication state.\n                     */\n                    await firstValueFrom(\n                        state.events.active.up.pipe(filter(s => !s))\n                    );\n                    return ev;\n                })\n            )\n            .subscribe((task: Task) => {\n                console.log('[RXDB_DOWNSTREAM] masterChangeStream$ new task: ', task);\n                state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n                addNewTask(task);\n            });\n        // unsubscribe when replication is canceled\n        firstValueFrom(\n            state.events.canceled.pipe(\n                filter(canceled => !!canceled)\n            )\n        ).then(() => sub.unsubscribe());\n    }\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n\n            /**\n             * By definition we stop pull when the pulled documents\n             * do not fill up the pullBatchSize because we\n             * can assume that the remote has no more documents.\n             */\n            if (downResult.documents.length < state.input.pullBatchSize) {\n                break;\n            }\n\n        }\n        await Promise.all(promises);\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        const docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n        console.log('[RXDB_DOWNSTREAM] downstreamProcessChanges: ', tasks);\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            appendToArray(docsOfAllTasks, task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        console.log('[RXDB_DOWNSTREAM] persistFromMaster start docs: ', docs);\n        console.log('[RXDB_DOWNSTREAM] persistFromMaster start checkpoint: ', checkpoint);\n        const primaryPath = state.primaryPath;\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        console.log('[RXDB_DOWNSTREAM] persistFromMaster nonPersistedFromMaster: ', nonPersistedFromMaster);\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeletedAndAttachments<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue docsIds: ', docIds);\n            console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue useCheckpoint: ', useCheckpoint);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, CheckpointType>> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta<RxDocType, CheckpointType>>[] = [];\n\n            console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save start');\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkStateList,\n                assumedMasterState\n            ]) => {\n                const currentForkState = new Map<string, RxDocumentData<RxDocType>>();\n                currentForkStateList.forEach(doc => currentForkState.set((doc as any)[primaryPath], doc));\n\n                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save currentForkStateList: ', currentForkStateList);\n                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save assumedMasterState: ', assumedMasterState);\n                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save currentForkStateList: ', currentForkStateList);\n\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState.get(docId);\n                        const forkStateDocData: WithDeletedAndAttachments<RxDocType> | undefined = forkStateFullDoc\n                            ? writeDocToDocState(forkStateFullDoc, state.hasAttachments, false)\n                            : undefined\n                            ;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison forkStateFullDoc: ', forkStateFullDoc);\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison forkStateDocData: ', forkStateDocData);\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison masterState: ', masterState);\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison assumedMaster: ', assumedMaster);\n\n                        if (\n                            assumedMaster &&\n                            forkStateFullDoc &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison result: RESOLVED CONFLICT!');\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            // return PROMISE_RESOLVE_VOID;\n                            await state.streamQueue.up;\n                        }\n\n                        let isAssumedMasterEqualToForkState = !assumedMaster || !forkStateDocData ?\n                            false :\n                            state.input.conflictHandler.isEqual(\n                                assumedMaster.docData,\n                                forkStateDocData,\n                                'downstream-check-if-equal-0'\n                            );\n\n                        if (\n                            !isAssumedMasterEqualToForkState &&\n                            (\n                                assumedMaster &&\n                                (assumedMaster.docData as any)._rev &&\n                                forkStateFullDoc &&\n                                forkStateFullDoc._meta[state.input.identifier] &&\n                                getHeightOfRevision(forkStateFullDoc._rev) === forkStateFullDoc._meta[state.input.identifier]\n                            )\n                        ) {\n                            isAssumedMasterEqualToForkState = true;\n                        }\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison isAssumedMasterEqualToForkState: ', isAssumedMasterEqualToForkState);\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison result: IGNORE non-upstream-replicated');\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        const areStatesExactlyEqual = !forkStateDocData\n                            ? false\n                            : state.input.conflictHandler.isEqual(\n                                masterState,\n                                forkStateDocData,\n                                'downstream-check-if-equal-1'\n                            );\n\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison areStatesExactlyEqual: ', areStatesExactlyEqual);\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             *\n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison result: EQUAL + META WRITE');\n                                useMetaWriteRows.push(\n                                    await getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            } else {\n                                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison result: EQUAL');\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: state.hasAttachments && masterState._attachments ? masterState._attachments : {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: {\n                                    lwt: now()\n                                },\n                                _rev: getDefaultRevision(),\n                                _attachments: state.hasAttachments && masterState._attachments ? masterState._attachments : {}\n                            }\n                        );\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison newForkState: ', newForkState);\n\n                        /**\n                         * If the remote works with revisions,\n                         * we store the height of the next fork-state revision\n                         * inside of the documents meta data.\n                         * By doing so we can filter it out in the upstream\n                         * and detect the document as being equal to master or not.\n                         * This is used for example in the CouchDB replication plugin.\n                         */\n                        if ((masterState as any)._rev) {\n                            const nextRevisionHeight = !forkStateFullDoc ? 1 : getHeightOfRevision(forkStateFullDoc._rev) + 1;\n                            newForkState._meta[state.input.identifier] = nextRevisionHeight;\n                            if (state.input.keepMeta) {\n                                newForkState._rev = (masterState as any)._rev;\n                            }\n                        }\n                        if (\n                            state.input.keepMeta &&\n                            (masterState as any)._meta\n                        ) {\n                            newForkState._meta = (masterState as any)._meta;\n                        }\n\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n\n                        forkWriteRow.document._rev = forkWriteRow.document._rev ? forkWriteRow.document._rev : createRevision(\n                            identifierHash,\n                            forkWriteRow.previous\n                        );\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison forkWriteRow: ', forkWriteRow);\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = await getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                        console.log(`[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue save comparison writeRowsToMeta['${docId}']: `, writeRowsToMeta[docId]);\n                    })\n                );\n            }).then(async () => {\n                if (writeRowsToFork.length > 0) {\n                    console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue bulk write writeRowsToFork: ', writeRowsToFork);\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        await state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue bulk write forkWriteResult: ', forkWriteResult);\n                        const success = getWrittenDocumentsFromBulkWriteResponse(\n                            state.primaryPath,\n                            writeRowsToFork,\n                            forkWriteResult\n                        );\n                        console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue bulk write success: ', success);\n                        success.forEach(doc => {\n                            const docId = (doc as any)[primaryPath];\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                        let mustThrow: RxError | undefined;\n                        forkWriteResult.error.forEach(error => {\n                            /**\n                             * We do not have to care about downstream conflict errors here\n                             * because on conflict, it will be solved locally and result in another write.\n                             */\n                            if (error.status === 409) {\n                                return;\n                            }\n                            // other non-conflict errors must be handled\n                            const throwMe = newRxError('RC_PULL', {\n                                writeError: error\n                            });\n                            state.events.error.next(throwMe);\n                            mustThrow = throwMe;\n                        });\n                        if (mustThrow) {\n                            throw mustThrow;\n                        }\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        stripAttachmentsDataFromMetaWriteRows(state, useMetaWriteRows),\n                        'replication-down-write-meta'\n                    ).then(metaWriteResult => {\n                        metaWriteResult.error\n                            .forEach(writeError => {\n                                state.events.error.next(newRxError('RC_PULL', {\n                                    id: writeError.documentId,\n                                    writeError\n                                }));\n                            });\n                    });\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                console.log('[RXDB_DOWNSTREAM] persistFromMaster persistenceQueue setCheckpoint: ', useCheckpoint);\n                setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                );\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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","ignoreList":[]}