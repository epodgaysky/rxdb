{"version":3,"file":"upstream.js","names":["_rxjs","require","_rxStorageHelper","_index","_checkpoint","_conflicts","_helper","_metaInstance","_index2","_rxError","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","getLastCheckpointDoc","setCheckpoint","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","persistenceQueue","PROMISE_RESOLVE_FALSE","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","isPaused","events","paused","getValue","console","log","collectionName","stats","forkChangeStreamEmit","push","task","time","active","next","waitBeforePersist","subResync","masterChangeStream$","pipe","filter","ev","firstValueFrom","canceled","unsubscribe","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","getChangedDocumentsSince","pushBatchSize","documents","length","stackCheckpoints","checkpoint","promise","persistToMaster","ensureNotFalsy","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","taskWithTime","shift","currentStateContext","downstreamBulkWriteFlag","context","appendToArray","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","rememberCheckpointBeforeReturn","assumedMasterState","getAssumedMasterState","writeRowsToMaster","result","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","writeDocToDocState","hasAttachments","keepMeta","assumedMasterDoc","newDoc","isResolvedConflictCondition","metaDocument","isResolvedConflict","_rev","conflictHandler","isEqual","getHeightOfRevision","_meta","identifier","undefined","newDocumentState","getMetaWriteRow","writeRowsArray","values","conflictIds","conflictsById","writeBatches","batchArray","writeBatch","row","fillWriteDataForAttachmentsChange","clone","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","stripAttachmentsDataFromMetaWriteRows","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","realMasterState","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","output","previous","document","persistToMasterConflictWrites","forkWriteResult","mustThrow","error","status","throwMe","newRxError","writeError","useMetaWrites","success","getWrittenDocumentsFromBulkWriteResponse","unhandledError"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport {\n    getChangedDocumentsSince,\n    getWrittenDocumentsFromBulkWriteResponse,\n    stackCheckpoints\n} from '../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxError,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    appendToArray,\n    batchArray,\n    clone,\n    ensureNotFalsy,\n    getHeightOfRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils/index.ts';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint.ts';\nimport {\n    resolveConflictError\n} from './conflicts.ts';\nimport {\n    stripAttachmentsDataFromMetaWriteRows,\n    writeDocToDocState\n} from './helper.ts';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance.ts';\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\nimport { newRxError } from '../rx-error.ts';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.upstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'up',\n                state.input.initialCheckpoint.upstream\n            );\n        }\n    }\n\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            return processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any> | 'RESYNC';\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    const sub = state.input.forkInstance.changeStream()\n        .subscribe((eventBulk) => {\n            const isPaused = state.events.paused.getValue();\n\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} forkInstance changeStream isPaused: `, isPaused);\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} forkInstance changeStream: `, eventBulk);\n            if (isPaused) {\n                return;\n            }\n\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (!state.events.active.up.getValue()) {\n                state.events.active.up.next(true);\n            }\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    const subResync = replicationHandler\n        .masterChangeStream$\n        .pipe(\n            filter(ev => ev === 'RESYNC')\n        )\n        .subscribe(() => {\n            openTasks.push({\n                task: 'RESYNC',\n                time: timer++\n            });\n            processTasks();\n        });\n\n    // unsubscribe when replication is canceled\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => {\n        sub.unsubscribe();\n        subResync.unsubscribe();\n    });\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Set<Promise<any>> = new Set();\n\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n\n            /**\n             * Throttle the calls to\n             * forkInstance.getChangedDocumentsSince() so that\n             * if the pushing to the remote is slower compared to the\n             * pulling out of forkInstance, we do not block the UI too much\n             * and have a big memory spike with all forkInstance documents.\n             */\n            if (promises.size > 3) {\n                await Promise.race(Array.from(promises));\n            }\n            const upResult = await getChangedDocumentsSince(\n                state.input.forkInstance,\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            const promise = persistToMaster(\n                upResult.documents,\n                ensureNotFalsy(lastCheckpoint)\n            );\n            promises.add(promise);\n            promise.catch().then(() => promises.delete(promise));\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (\n            !state.firstSyncDone.up.getValue() &&\n            !state.events.canceled.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(async () => {\n            /**\n             * Merge/filter all open tasks\n             */\n            const docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} incoming task: `, taskWithTime);\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} initialSyncStartTime: `, initialSyncStartTime);\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n\n                if (taskWithTime.task === 'RESYNC') {\n                    state.events.active.up.next(false);\n                    await upstreamInitialSync();\n                    return;\n                }\n\n                /**\n                 * If the task came from the downstream, we can ignore these documents\n                 * because we know they are replicated already.\n                 * But even if they can be ignored, we later have to call persistToMaster()\n                 * to have the correct checkpoint set.\n                 */\n                const currentStateContext = await state.downstreamBulkWriteFlag;\n\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} taskWithTime context: `, taskWithTime);\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} currentStateContext context: `, currentStateContext);\n\n                if (taskWithTime.task.context !== currentStateContext) {\n                    console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} appending docs from task for persisting to master: `, taskWithTime);\n                    appendToArray(\n                        docs,\n                        taskWithTime.task.events.map(r => {\n                            return r.documentData as any;\n                        })\n                    );\n                }\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            await persistToMaster(\n                docs,\n                checkpoint\n            );\n\n            // might have got more tasks while running persistToMaster()\n            if (openTasks.length === 0) {\n                state.events.active.up.next(false);\n            } else {\n                return processTasks();\n            }\n        });\n    }\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            /**\n             * Even if we do not have anything to push,\n             * we still have to store the up-checkpoint.\n             * This ensures that when many documents have been pulled\n             * from the remote (that do not have to be pushed again),\n             * we continue at the correct position and do not have to load\n             * these documents from the storage again when the replication is restarted.\n             */\n            function rememberCheckpointBeforeReturn() {\n                return setCheckpoint(\n                    state,\n                    'up',\n                    useCheckpoint\n                );\n            };\n\n\n            if (docIds.length === 0) {\n                rememberCheckpointBeforeReturn();\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const result: ById<{ newDoc: WithDeleted<RxDocType>; assumedMasterDoc: WithDeleted<RxDocType> | {}; isResolvedConflictCondition: boolean; }> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    result[docId] = {\n                        newDoc: docData,\n                        assumedMasterDoc,\n                        isResolvedConflictCondition:(\n                                assumedMasterDoc &&\n                                // if the isResolvedConflict is correct, we do not have to compare the documents.\n                                assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                                &&\n                                (\n                                    state.input.conflictHandler.isEqual(\n                                        assumedMasterDoc.docData,\n                                        docData,\n                                        'upstream-check-if-equal'\n                                    )\n                                )\n                            )\n                            ||\n                            /**\n                             * If the master works with _rev fields,\n                             * we use that to check if our current doc state\n                             * is different from the assumedMasterDoc.\n                             */\n                            (\n                                assumedMasterDoc &&\n                                (assumedMasterDoc.docData as any)._rev &&\n                                getHeightOfRevision(fullDocData._rev) === fullDocData._meta[state.input.identifier]\n                            )\n                    };\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (\n                                state.input.conflictHandler.isEqual(\n                                    assumedMasterDoc.docData,\n                                    docData,\n                                    'upstream-check-if-equal'\n                                )\n                            )\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            getHeightOfRevision(fullDocData._rev) === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                rememberCheckpointBeforeReturn();\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n\n                    // enhance docs with attachments\n                    if (state.hasAttachments) {\n                        await Promise.all(\n                            writeBatch.map(async (row) => {\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\n                                    state.primaryPath,\n                                    state.input.forkInstance,\n                                    clone(row.newDocumentState),\n                                    row.assumedMasterState\n                                );\n                            })\n                        );\n                    }\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(async (resolved) => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n\n                    let mustThrow: RxError | undefined;\n                    forkWriteResult.error.forEach(error => {\n                        /**\n                         * Conflict-Errors in the forkWriteResult must not be handled\n                         * because they have been caused by a write to the forkInstance\n                         * in between which will anyway trigger a new upstream cycle\n                         * that will then resolved the conflict again.\n                         */\n                        if (error.status === 409) {\n                            return;\n                        }\n                        // other non-conflict errors must be handled\n                        const throwMe = newRxError('RC_PUSH', {\n                            writeError: error\n                        });\n                        state.events.error.next(throwMe);\n                        mustThrow = throwMe;\n                    });\n                    if (mustThrow) {\n                        throw mustThrow;\n                    }\n\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\n                        state.primaryPath,\n                        conflictWriteFork,\n                        forkWriteResult\n                    );\n                    success\n                        .forEach(docData => {\n                            const docId = (docData as any)[state.primaryPath];\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} UPSTREAM WRITTEN DOCUMENTS: `, writeRowsToMaster);\n            rememberCheckpointBeforeReturn();\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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","ignoreList":[]}