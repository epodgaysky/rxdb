{"version":3,"file":"upstream.js","names":["firstValueFrom","filter","getChangedDocumentsSince","getWrittenDocumentsFromBulkWriteResponse","stackCheckpoints","appendToArray","batchArray","clone","ensureNotFalsy","getHeightOfRevision","PROMISE_RESOLVE_FALSE","getLastCheckpointDoc","setCheckpoint","resolveConflictError","stripAttachmentsDataFromMetaWriteRows","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","fillWriteDataForAttachmentsChange","newRxError","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","persistenceQueue","nonPersistedFromMaster","docs","sub","forkInstance","changeStream","subscribe","eventBulk","isPaused","events","paused","getValue","console","log","collectionName","stats","forkChangeStreamEmit","push","task","time","active","next","waitBeforePersist","subResync","masterChangeStream$","pipe","ev","canceled","unsubscribe","checkpointQueue","lastCheckpoint","promises","Set","_loop","size","Promise","race","Array","from","upResult","pushBatchSize","documents","length","checkpoint","promise","persistToMaster","add","catch","delete","resolvedPromises","all","hadConflicts","find","r","firstSyncDone","taskWithTime","shift","currentStateContext","downstreamBulkWriteFlag","context","map","documentData","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","rememberCheckpointBeforeReturn","assumedMasterState","writeRowsToMaster","result","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","hasAttachments","keepMeta","assumedMasterDoc","newDoc","isResolvedConflictCondition","metaDocument","isResolvedConflict","_rev","conflictHandler","isEqual","_meta","identifier","undefined","newDocumentState","writeRowsArray","values","conflictIds","conflictsById","writeBatches","writeBatch","row","masterWriteResult","masterWrite","conflictDoc","id","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","hadConflictWrites","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","realMasterState","writeToMasterRow","resolved","resolvedConflicts","output","previous","document","persistToMasterConflictWrites","forkWriteResult","mustThrow","error","status","throwMe","writeError","useMetaWrites","success","unhandledError"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport {\n    getChangedDocumentsSince,\n    getWrittenDocumentsFromBulkWriteResponse,\n    stackCheckpoints\n} from '../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxError,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types/index.d.ts';\nimport {\n    appendToArray,\n    batchArray,\n    clone,\n    ensureNotFalsy,\n    getHeightOfRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils/index.ts';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint.ts';\nimport {\n    resolveConflictError\n} from './conflicts.ts';\nimport {\n    stripAttachmentsDataFromMetaWriteRows,\n    writeDocToDocState\n} from './helper.ts';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance.ts';\nimport { fillWriteDataForAttachmentsChange } from '../plugins/attachments/index.ts';\nimport { newRxError } from '../rx-error.ts';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.upstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'up',\n                state.input.initialCheckpoint.upstream\n            );\n        }\n    }\n\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            return processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any> | 'RESYNC';\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    const sub = state.input.forkInstance.changeStream()\n        .subscribe((eventBulk) => {\n            const isPaused = state.events.paused.getValue();\n\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} forkInstance changeStream isPaused: `, isPaused);\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} forkInstance changeStream: `, eventBulk);\n            if (isPaused) {\n                return;\n            }\n\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (!state.events.active.up.getValue()) {\n                state.events.active.up.next(true);\n            }\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    const subResync = replicationHandler\n        .masterChangeStream$\n        .pipe(\n            filter(ev => ev === 'RESYNC')\n        )\n        .subscribe(() => {\n            openTasks.push({\n                task: 'RESYNC',\n                time: timer++\n            });\n            processTasks();\n        });\n\n    // unsubscribe when replication is canceled\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => {\n        sub.unsubscribe();\n        subResync.unsubscribe();\n    });\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Set<Promise<any>> = new Set();\n\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n\n            /**\n             * Throttle the calls to\n             * forkInstance.getChangedDocumentsSince() so that\n             * if the pushing to the remote is slower compared to the\n             * pulling out of forkInstance, we do not block the UI too much\n             * and have a big memory spike with all forkInstance documents.\n             */\n            if (promises.size > 3) {\n                await Promise.race(Array.from(promises));\n            }\n            const upResult = await getChangedDocumentsSince(\n                state.input.forkInstance,\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            const promise = persistToMaster(\n                upResult.documents,\n                ensureNotFalsy(lastCheckpoint)\n            );\n            promises.add(promise);\n            promise.catch().then(() => promises.delete(promise));\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (\n            !state.firstSyncDone.up.getValue() &&\n            !state.events.canceled.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(async () => {\n            /**\n             * Merge/filter all open tasks\n             */\n            const docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} incoming task: `, taskWithTime);\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} initialSyncStartTime: `, initialSyncStartTime);\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n\n                if (taskWithTime.task === 'RESYNC') {\n                    state.events.active.up.next(false);\n                    await upstreamInitialSync();\n                    return;\n                }\n\n                /**\n                 * If the task came from the downstream, we can ignore these documents\n                 * because we know they are replicated already.\n                 * But even if they can be ignored, we later have to call persistToMaster()\n                 * to have the correct checkpoint set.\n                 */\n                const currentStateContext = await state.downstreamBulkWriteFlag;\n\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} taskWithTime context: `, taskWithTime);\n                console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} currentStateContext context: `, currentStateContext);\n\n                if (taskWithTime.task.context !== currentStateContext) {\n                    console.log(`[RXDB_UPSTREAM] ${state.input.forkInstance.collectionName} appending docs from task for persisting to master: `, taskWithTime);\n                    appendToArray(\n                        docs,\n                        taskWithTime.task.events.map(r => {\n                            return r.documentData as any;\n                        })\n                    );\n                }\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            await persistToMaster(\n                docs,\n                checkpoint\n            );\n\n            // might have got more tasks while running persistToMaster()\n            if (openTasks.length === 0) {\n                state.events.active.up.next(false);\n            } else {\n                return processTasks();\n            }\n        });\n    }\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            /**\n             * Even if we do not have anything to push,\n             * we still have to store the up-checkpoint.\n             * This ensures that when many documents have been pulled\n             * from the remote (that do not have to be pushed again),\n             * we continue at the correct position and do not have to load\n             * these documents from the storage again when the replication is restarted.\n             */\n            function rememberCheckpointBeforeReturn() {\n                return setCheckpoint(\n                    state,\n                    'up',\n                    useCheckpoint\n                );\n            };\n\n\n            if (docIds.length === 0) {\n                rememberCheckpointBeforeReturn();\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const result: ById<{ newDoc: WithDeleted<RxDocType>; assumedMasterDoc: WithDeleted<RxDocType>; isResolvedConflictCondition: boolean; }> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData, state.hasAttachments, !!state.input.keepMeta);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    result[docId] = {\n                        newDoc: docData,\n                        assumedMasterDoc,\n                        isResolvedConflictCondition:(\n                                assumedMasterDoc &&\n                                // if the isResolvedConflict is correct, we do not have to compare the documents.\n                                assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                                &&\n                                (\n                                    state.input.conflictHandler.isEqual(\n                                        assumedMasterDoc.docData,\n                                        docData,\n                                        'upstream-check-if-equal'\n                                    )\n                                )\n                            )\n                            ||\n                            /**\n                             * If the master works with _rev fields,\n                             * we use that to check if our current doc state\n                             * is different from the assumedMasterDoc.\n                             */\n                            (\n                                assumedMasterDoc &&\n                                (assumedMasterDoc.docData as any)._rev &&\n                                getHeightOfRevision(fullDocData._rev) === fullDocData._meta[state.input.identifier]\n                            )\n                    };\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (\n                                state.input.conflictHandler.isEqual(\n                                    assumedMasterDoc.docData,\n                                    docData,\n                                    'upstream-check-if-equal'\n                                )\n                            )\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            getHeightOfRevision(fullDocData._rev) === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = await getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                rememberCheckpointBeforeReturn();\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n\n                    // enhance docs with attachments\n                    if (state.hasAttachments) {\n                        await Promise.all(\n                            writeBatch.map(async (row) => {\n                                row.newDocumentState = await fillWriteDataForAttachmentsChange(\n                                    state.primaryPath,\n                                    state.input.forkInstance,\n                                    clone(row.newDocumentState),\n                                    row.assumedMasterState\n                                );\n                            })\n                        );\n                    }\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    stripAttachmentsDataFromMetaWriteRows(state, useWriteRowsToMeta),\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta<RxDocType, any>> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(async (resolved) => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = await getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n\n                    let mustThrow: RxError | undefined;\n                    forkWriteResult.error.forEach(error => {\n                        /**\n                         * Conflict-Errors in the forkWriteResult must not be handled\n                         * because they have been caused by a write to the forkInstance\n                         * in between which will anyway trigger a new upstream cycle\n                         * that will then resolved the conflict again.\n                         */\n                        if (error.status === 409) {\n                            return;\n                        }\n                        // other non-conflict errors must be handled\n                        const throwMe = newRxError('RC_PUSH', {\n                            writeError: error\n                        });\n                        state.events.error.next(throwMe);\n                        mustThrow = throwMe;\n                    });\n                    if (mustThrow) {\n                        throw mustThrow;\n                    }\n\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta<RxDocType, any>>[] = [];\n                    const success = getWrittenDocumentsFromBulkWriteResponse(\n                        state.primaryPath,\n                        conflictWriteFork,\n                        forkWriteResult\n                    );\n                    success\n                        .forEach(docData => {\n                            const docId = (docData as any)[state.primaryPath];\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            stripAttachmentsDataFromMetaWriteRows(state, useMetaWrites),\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            console.log(`[RXDB_UPSTREAM]: ${state.input.forkInstance.collectionName} UPSTREAM WRITTEN DOCUMENTS: `, writeRowsToMaster);\n            rememberCheckpointBeforeReturn();\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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","ignoreList":[]}