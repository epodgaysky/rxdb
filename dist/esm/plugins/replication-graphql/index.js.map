{"version":3,"file":"index.js","names":["ensureNotFalsy","flatClone","getDataFromResult","graphQLRequest","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","removeGraphQLWebSocketRef","getGraphQLWebSocket","Subject","RxGraphQLReplicationState","_RxReplicationState","url","clientState","replicationIdentifier","collection","deletedField","pull","push","live","retryTime","autoStart","toggleOnDocumentVisible","customFetch","_this","call","_inheritsLoose","_proto","prototype","setHeaders","headers","setCredentials","credentials","queryParams","fetch","http","replicateGraphQL","waitForLeadership","mutateableClientState","pullStream$","replicationPrimitivesPull","pullBatchSize","batchSize","handler","lastPulledCheckpoint","pullGraphQL","queryBuilder","result","graphqlReplicationState","errors","data","dataPath","responseModifier","docsData","documents","newCheckpoint","checkpoint","modifier","stream$","asObservable","replicationPrimitivesPush","rows","pushObj","mustUseSocket","ws","streamQueryBuilder","startBefore","start","bind","httpHeaders","includeWsHeaders","undefined","wsClient","wsOptions","on","next","query","subscribe","streamResponse","firstField","Object","keys","error","complete","cancelBefore","cancel","isStopped"],"sources":["../../../../src/plugins/replication-graphql/index.ts"],"sourcesContent":["/**\n * this plugin adds the RxCollection.syncGraphQl()-function to rxdb\n * you can use it to sync collections with a remote graphql endpoint.\n */\nimport {\n    ensureNotFalsy,\n    flatClone\n} from '../../plugins/utils/index.ts';\n\nimport {\n    getDataFromResult,\n    graphQLRequest\n} from './helper.ts';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election/index.ts';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    GraphQLServerUrl,\n    RxReplicationPullStreamItem,\n    RxGraphQLReplicationQueryBuilderResponseObject,\n    RxGraphQLReplicationClientState,\n    ById\n} from '../../types/index.d.ts';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication/index.ts';\nimport {\n    addRxPlugin,\n    SyncOptionsGraphQL,\n    WithDeleted\n} from '../../index.ts';\n\nimport {\n    removeGraphQLWebSocketRef,\n    getGraphQLWebSocket\n} from './graphql-websocket.ts';\nimport { Subject } from 'rxjs';\n\n\nexport class RxGraphQLReplicationState<RxDocType, CheckpointType> extends RxReplicationState<RxDocType, CheckpointType> {\n    constructor(\n        public readonly url: GraphQLServerUrl,\n        public readonly clientState: RxGraphQLReplicationClientState,\n        public readonly replicationIdentifier: string,\n        public readonly collection: RxCollection<RxDocType, any, any, any>,\n        public readonly deletedField: string,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live?: boolean,\n        public retryTime?: number,\n        public autoStart?: boolean,\n        public toggleOnDocumentVisible?: boolean,\n        public readonly customFetch?: WindowOrWorkerGlobalScope['fetch'],\n    ) {\n        super(\n            replicationIdentifier,\n            collection,\n            deletedField,\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart,\n            toggleOnDocumentVisible\n        );\n    }\n\n    setHeaders(headers: ById<string>): void {\n        this.clientState.headers = flatClone(headers);\n    }\n\n    setCredentials(credentials: RequestCredentials | undefined) {\n        this.clientState.credentials = credentials;\n    }\n\n    graphQLRequest(\n        queryParams: RxGraphQLReplicationQueryBuilderResponseObject\n    ) {\n        return graphQLRequest(\n            this.customFetch ?? fetch,\n            ensureNotFalsy(this.url.http),\n            this.clientState,\n            queryParams\n        );\n    }\n}\n\nexport function replicateGraphQL<RxDocType, CheckpointType>(\n    {\n        collection,\n        url,\n        headers = {},\n        credentials,\n        deletedField = '_deleted',\n        waitForLeadership = true,\n        pull,\n        push,\n        live = true,\n        fetch: customFetch,\n        retryTime = 1000 * 5, // in ms\n        autoStart = true,\n        replicationIdentifier,\n        toggleOnDocumentVisible\n    }: SyncOptionsGraphQL<RxDocType, CheckpointType>\n): RxGraphQLReplicationState<RxDocType, CheckpointType> {\n    addRxPlugin(RxDBLeaderElectionPlugin);\n    /**\n     * We use this object to store the GraphQL client\n     * so we can later swap out the client inside of the replication handlers.\n     */\n    const mutateableClientState = {\n        headers,\n        credentials\n    };\n\n\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CheckpointType>> = new Subject();\n\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CheckpointType> | undefined;\n    if (pull) {\n        const pullBatchSize = pull.batchSize ? pull.batchSize : 20;\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CheckpointType | undefined\n            ) {\n                const pullGraphQL = await pull.queryBuilder(lastPulledCheckpoint, pullBatchSize);\n                const result = await graphqlReplicationState.graphQLRequest(pullGraphQL);\n                if (result.errors) {\n                    throw result.errors;\n                }\n                let data: any = getDataFromResult(result, pull.dataPath);\n                if (pull.responseModifier) {\n                    data = await pull.responseModifier(\n                        data,\n                        'handler',\n                        lastPulledCheckpoint\n                    );\n                }\n\n                const docsData: WithDeleted<RxDocType>[] = data.documents;\n                const newCheckpoint = data.checkpoint;\n\n                return {\n                    documents: docsData,\n                    checkpoint: newCheckpoint\n                };\n            },\n            batchSize: pull.batchSize,\n            modifier: pull.modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                const pushObj = await push.queryBuilder(rows);\n                const result = await graphqlReplicationState.graphQLRequest(pushObj);\n\n                if (result.errors) {\n                    throw result.errors;\n                }\n                let data: any = getDataFromResult(result, push.dataPath);\n                if (push.responseModifier) {\n                    data = await push.responseModifier(\n                        data,\n                    );\n                }\n\n                return data;\n            },\n            batchSize: push.batchSize,\n            modifier: push.modifier\n        };\n    }\n\n    const graphqlReplicationState = new RxGraphQLReplicationState(\n        url,\n        mutateableClientState,\n        replicationIdentifier,\n        collection,\n        deletedField,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        live,\n        retryTime,\n        autoStart,\n        toggleOnDocumentVisible,\n        customFetch\n    );\n\n    const mustUseSocket = url.ws &&\n        pull &&\n        pull.streamQueryBuilder &&\n        live;\n\n    const startBefore = graphqlReplicationState.start.bind(graphqlReplicationState);\n    graphqlReplicationState.start = () => {\n        if (mustUseSocket) {\n            const httpHeaders = pull.includeWsHeaders ? mutateableClientState.headers : undefined;\n            const wsClient = getGraphQLWebSocket(ensureNotFalsy(url.ws), httpHeaders, pull.wsOptions);\n\n            wsClient.on('connected', () => {\n                pullStream$.next('RESYNC');\n            });\n\n            const query: any = ensureNotFalsy(pull.streamQueryBuilder)(mutateableClientState.headers);\n\n            wsClient.subscribe(\n                query,\n                {\n                    next: async (streamResponse: any) => {\n                        const firstField = Object.keys(streamResponse.data)[0];\n                        let data = streamResponse.data[firstField];\n                        if (pull.responseModifier) {\n                            data = await pull.responseModifier(\n                                data,\n                                'stream'\n                            );\n                        }\n                        pullStream$.next(data);\n                    },\n                    error: (error: any) => {\n                        pullStream$.error(error);\n                    },\n                    complete: () => {\n                        pullStream$.complete();\n                    }\n                });\n        }\n        return startBefore();\n    };\n\n    const cancelBefore = graphqlReplicationState.cancel.bind(graphqlReplicationState);\n    graphqlReplicationState.cancel = () => {\n        if (!graphqlReplicationState.isStopped()) {\n            pullStream$.complete();\n            if (mustUseSocket) {\n                removeGraphQLWebSocketRef(ensureNotFalsy(url.ws));\n            }\n        }\n        return cancelBefore();\n    };\n\n    startReplicationOnLeaderShip(waitForLeadership, graphqlReplicationState);\n    return graphqlReplicationState;\n}\n\nexport * from './helper.ts';\nexport * from './graphql-schema-from-rx-schema.ts';\nexport * from './query-builder-from-rx-schema.ts';\nexport * from './graphql-websocket.ts';\n\n"],"mappings":"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","ignoreList":[]}